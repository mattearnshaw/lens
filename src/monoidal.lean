import data.equiv.basic
import algebra.category.Mon.limits
import category_theory.monoidal.category
--import category_theory.limits.shapes.finite_products

open category_theory category_theory.limits category_theory.iso
open Mon

namespace category_theory.monoidal

def tensor_obj (M N : Mon) : Mon := Mon.of (‚Ü•M √ó ‚Ü•N)

def tensor_hom {M N M' N' : Mon} : (M ‚ü∂ N) ‚Üí (M' ‚ü∂ N') ‚Üí (tensor_obj M M' ‚ü∂ tensor_obj N N') :=
Œª f g, { to_fun := (Œª p, (f p.1, g p.2)), map_one' := by tidy, map_mul' := by tidy }

def associator (X Y Z : Mon) : Mon.of (‚Ü•(Mon.of (‚Ü•X √ó ‚Ü•Y)) √ó ‚Ü•Z) ‚âÖ Mon.of (‚Ü•X √ó ‚Ü•(Mon.of (‚Ü•Y √ó ‚Ü•Z))) :=
begin
  apply mul_equiv.to_Mon_iso,
  exact { to_fun := by rintro ‚ü®‚ü®x, y‚ü©, z‚ü©; exact (x, (y, z)),
  inv_fun := by rintro ‚ü®x, ‚ü®y, z‚ü©‚ü©; exact ((x, y), z),
  left_inv := by rintro ‚ü®‚ü®x, y‚ü©, z‚ü©; refl,
  right_inv := by rintro ‚ü®x, ‚ü®y, z‚ü©‚ü©; refl,
  map_mul' := by rintros ‚ü®‚ü®x, y‚ü©,_‚ü© ‚ü®‚ü®x, y‚ü©, _‚ü©; refl, }
end

def of_self_iso (M : Mon) : Mon.of M ‚âÖ M :=
{ hom := ùüô M, inv := ùüô M }

def product.lid (M : Mon) : of (punit √ó M) ‚âÉ* M :=
{to_fun := Œª p, p.2,
 inv_fun := Œª p, (1, p),
 left_inv := by intros x; cases x; cases x_fst; refl,
 right_inv := by intros x; refl,
 map_mul' := by intros x y; refl}

def product.rid (M : Mon) : of (M √ó punit) ‚âÉ* M :=
{to_fun := Œª p, p.1,
 inv_fun := Œª p, (p, 1),
 left_inv := by intros x; cases x; cases x_snd; refl,
 right_inv := by intros x; refl,
 map_mul' := by intros x y; refl}

def left_unitor (M : Mon) : Mon.of (‚Ü•(of punit) √ó ‚Ü•M) ‚âÖ M :=
(mul_equiv.to_Mon_iso (product.lid M)).trans (of_self_iso M)

def right_unitor (M : Mon) : Mon.of (‚Ü•M √ó ‚Ü•(of punit)) ‚âÖ M :=
(mul_equiv.to_Mon_iso (product.rid M)).trans (of_self_iso M)

lemma associator_naturality {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : Mon}
  (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ) :
    tensor_hom (tensor_hom f‚ÇÅ f‚ÇÇ) f‚ÇÉ ‚â´ (associator Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ).hom =
    (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom ‚â´ tensor_hom f‚ÇÅ (tensor_hom f‚ÇÇ f‚ÇÉ) := by ext; tidy

instance Mon_monoidal : monoidal_category Mon := {
  tensor_obj := tensor_obj,
  tensor_hom := @tensor_hom,
  tensor_unit := of punit,
  associator := associator,
  left_unitor := left_unitor,
  right_unitor := right_unitor,
  tensor_id' := begin intros, tidy, end,
  tensor_comp' := begin intros, tidy, end,
}

@[simp] lemma tensor_apply {W X Y Z : Mon} (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) (p : tensor_obj W Y) :
(tensor_hom f g) p = (f p.1, g p.2) := rfl

@[simp] lemma left_unitor_hom_apply {X : Mon} {x : X} {p : punit} :
  ((Œª_ X).hom : (ùüô_ (Mon)) ‚äó X ‚Üí X) (p, x) = x := rfl
@[simp] lemma left_unitor_inv_apply {X : Mon} {x : X} :
  ((Œª_ X).inv : X ‚ü∂ (ùüô_ (Mon)) ‚äó X) x = (punit.star, x) := rfl

@[simp] lemma right_unitor_hom_apply {X : Mon} {x : X} {p : punit} :
  ((œÅ_ X).hom : X ‚äó (ùüô_ (Mon)) ‚Üí X) (x, p) = x := rfl
@[simp] lemma right_unitor_inv_apply {X : Mon} {x : X} :
  ((œÅ_ X).inv : X ‚ü∂ X ‚äó (ùüô_ (Mon))) x = (x, punit.star) := rfl

@[simp] lemma associator_hom_apply {X Y Z : Mon} {x : X} {y : Y} {z : Z} :
  ((Œ±_ X Y Z).hom : (X ‚äó Y) ‚äó Z ‚Üí X ‚äó (Y ‚äó Z)) ((x, y), z) = (x, (y, z)) := rfl
@[simp] lemma associator_inv_apply {X Y Z : Mon} {x : X} {y : Y} {z : Z} :
  ((Œ±_ X Y Z).inv : X ‚äó (Y ‚äó Z) ‚Üí (X ‚äó Y) ‚äó Z) (x, (y, z)) = ((x, y), z) := rfl

end category_theory.monoidal
